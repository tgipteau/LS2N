/*************************************************************************
*
*	Système de réaction-diffusion modélisant
*	l'interaction entre la forêt mixte et
*	la forêt boréale.
*
*	Forêt mixte :
*	du1/dt = eta1*w1 - q1(u1, u2, x)
*	dw1/dt = d1*Delta w1 - beta1*w1 + alpha1*u1
*
*	Forêt boréale :
*	du2/dt = eta2*w2 - q2(u2, u1, x)
*	dw2/dt = d2*Delta w2 - beta2*w2 + alpha2*u2
*
*
**************************************************************************/


	/* Paramètres */

// Forêt mixte
real alpha1 = 1.0;
real beta1 = 1.0;
real eta1 = 1.0;
real a1 = 0.9;
real b1 = 4.0;
real d1 = 10;

// Forêt boréale
real alpha2 = 1.0;
real beta2 = 1.0;
real eta2 = 1.0;
real a2 = 0.9;
real b2 = 4.0;
real d2 = 10;

// Compétition
real gamma = - 0.05;

// Discrétisation en temps
real dt = 0.05;
real dtau = dt/2.0;


// Génération de nombre aléatoire
real p = 0.1;		// probabilité d'un événement extrême
			// p = 0 -> aucun événement extrême
			// p = 1 -> événement extrême à tous les coups
/*
real intensity = randreal1(); 	// intensity = 0 -> aucun effet
			// intensity = 1 -> tous les arbres sont tués dans la zone de l'événement extrême
*/


func int Bernoulli(real p)
{
	real DE;
	DE = randreal1();
	return (DE<p);
}


// Evénements extrêmes
int frequency = 1;	// définit un intervalle de temps de retour possible d'un événement extrême



/* Domain */
real L = 50;
real l = 80;
border C(t=0,2*pi){x=(L/2)*(cos(t))+(L/2); y=(l/2)*(sin(t))+(l/2);}
mesh Th = buildmesh(C(80));

fespace Vh(Th, P1);

real hb1 = 0.2;
real hb2 = 0.3;
real hm1 = 0.1;
real hm2 = 0.15;















/* Reaction */

// Taux de mortalité pour la forêt mixte
func real c1(real x, real y)
{
	if ((10<y) && (y<60)){
		return hm1;
	}
	else {
		return hm2;
	}	
}

// Taux de mortalité pour la forêt boréale
func real c2(real x, real y)
{
	if ((40<y) && (y<70)){
		return hb1;
	}
	else {
		return hb2;
	}
	
}

func real[int] fct(real[int] X, real t)
{
	// X[0] -> u1
	// X[1] -> w1
	// X[2] -> u2
	// X[3] -> w2

	real[int] dX(4);
	dX = 1.0;
	// Forêt mixte
    	dX[0] = eta1*X[1] - X[0]*(a1*(X[0]-b1)*(X[0]-b1)+c1(x, y)) + gamma*X[0]*X[2];
	dX[1] = -beta1*X[1] + alpha1*X[0];
	// Forêt boréale
    	dX[2] = eta2*X[3] - X[2]*(a2*(X[2]-b2)*(X[2]-b2)+c2(x, y)) - gamma*X[0]*X[2];
	dX[3] = -beta2*X[3] + alpha2*X[2];
    	return dX;
}













	/* Runge-Kutta */

func real[int] RK4(real[int] U, real t)
{
	real[int] u2(4), u3(4), u4(4);
	real[int] p1(4), p2(4), p3(4), p4(4);
	real t2, tnew;
	real[int] unew(4);
	unew = 1.0;

    	p1 = fct(U, t);
    	t2 = t + 0.5*dt;
    	u2 = U + 0.5*dt*p1;
    	p2 = fct(u2, t2);
    	u3 = U + 0.5*dt*p2;
    	p3 = fct(u3, t2);
    	tnew = t + dt;
    	u4 = U + dt*p3;
    	p4 = fct(u4, tnew);
    	unew = 1.0*p1;
	unew = unew + 2.0*p2;
	unew = unew + 2.0*p3;
	unew = unew + 1.0*p4;
	unew = U + dt*1./6.*unew;
    	return unew;
}












/* Diffusion */

Vh u1, u2, w1new, w1old, w2new, w2old, phi1, phi2;

problem Diffusionw1(w1new, phi1) = int2d(Th)( w1new*phi1 + d1*dtau*(dx(w1new)* dx(phi1) + dy(w1new)* dy(phi1))) + int2d(Th) ( -w1old*phi1 );
problem Diffusionw2(w2new, phi2) = int2d(Th)( w2new*phi2 + d2*dtau*(dx(w2new)* dx(phi2) + dy(w2new)* dy(phi2))) + int2d(Th) ( -w2old*phi2 );

real t = 0.0;

cout << "GO !!!!\n";

/* Initial condition */

// Forêt mixte
func real u10(real x, real y)
{
	real res;
	res = 3+0.1*randreal1();//y*4/l;
	return res;
}

func real w10(real x, real y)
{
	real res;
	res = 3+0.1*randreal1();//y*4/l;
	return res;
}

// Forêt boréale
func real u20(real x, real y)
{
	real res;
	res = 3+0.1*randreal1();//y*4/l;
	return res;
}

func real w20(real x, real y)
{
	real res;
	res = 3+0.1*randreal1();//y*4/l;
	return res;
}

u1 = u10(x, y);
w1old = w10(x, y);
u2 = u20(x, y);
w2old = w20(x, y);
















/* Ecriture des paramètres */

{
ofstream f("data-raw-competition-feux/params.dat"); 
f << "alpha1 = " << alpha1 << "\n";
f << "beta1 = " << beta1 << "\n";
f << "eta1 = " << eta1 << "\n";
f << "a1 = " << a1 << "\n";
f << "b1 = " << b1 << "\n";
f << "d1 = " << d1 << "\n";

f << "alpha2 = " << alpha2 << "\n";
f << "beta2 = " << beta2 << "\n";
f << "eta2 = " << eta2 << "\n";
f << "a2 = " << a2 << "\n";
f << "b2 = " << b2 << "\n";
f << "d2 = " << d2 << "\n";

f << "gamma = " << gamma << "\n";

f << "dt = " << dt << "\n";
f << "dtau = " << dtau << "\n";

f << "p = " << p << "\n";

f << "frequency = " << frequency << "\n";

f << "L = " << L << "\n";
f << "l = " << l << "\n";

f << "hb1 = " << hb1 << "\n";
f << "hb2 = " << hb2 << "\n";
f << "hm1 = " << hm1 << "\n";
f << "hm2 = " << hm2 << "\n";
}










/* splitting scheme */


for (int m=0; m<10/dt; m++)
{
	plot(u1, WindowIndex=1, cmm="MIXTE : t="+ t + ", u1: min=" + u1[].min + ", max=" + u1[].max, wait=false, fill=true);//, dim=3);
	plot(u2, WindowIndex=2, cmm="BOREALE : t="+ t + ", u2: min=" + u2[].min + ", max=" + u2[].max, wait=false, fill=true);//, dim=3);

	
	ofstream f1("data-raw-competition-feux/u-"+m+".dat");

    	for (int i=0;i<Th.nt;i++){
            	for (int j=0; j<3; j++){
                    	f1 << Th[i][j].x << "\t" << Th[i][j].y << "\t" << u1[][Vh(i,j)] << "\t" << u2[][Vh(i,j)] << endl;
            	}
	}
	


	// Diffusion for half-step
	Diffusionw1;
	Diffusionw2;
	w1old = w1new;
	w2old = w2new;
	t = t + dtau;

	// Reaction for one step	
	func real[int] reaction(real x, real y)
		{
			real[int] U(4);
			U[0] = u1;
			U[1] = w1old;
			U[2] = u2;
			U[3] = w2old;
			U = RK4(U, t);
			return U;
		}

	u1 = reaction(x, y)[0];
	w1old = reaction(x, y)[1];
	u2 = reaction(x, y)[2];
	w2old = reaction(x, y)[3];
	t = t + dt;

	// Diffusion for half-step
	Diffusionw1;
	Diffusionw2;
	w1old = w1new;
	w2old = w2new;
	t = t + dtau;


	// Evénement extrême de type feu localisé
			if (m%frequency == 0){		// On définit une fréquence temporelle de probabilité d'événement extrême
				if (Bernoulli(p)==1){
					cout << "//////////////////////" << endl;
					cout << "// FEU DE FORET !!! //" << endl;
					cout << "//////////////////////" << endl;
					real xee = -1.0 + 2.0*randreal1();
					real yee = -1.0 + 2.0*randreal1();
					xee = xee/sqrt(2);
					yee = yee/sqrt(2);
					xee = (L/2.0) + (L/2.0)*xee;
					yee = (l/2.0) + (l/2.0)*yee;
					/* Remarque :
					
					   Pour envoyer le carré [-1, 1] x [-1, 1] sur le disque unité, on peut
					   utiliser la transformation
					   
					   	X = x * sqrt(1 - y * y / 2),
						Y = y * sqrt(1 - x * x / 2),
						
					   après avoir généré aléatoirement x et y :
					   	x = -1 + 2*random(),
						y = -1 + 2*random().
			
					*/


					cout << "Feu en (" << xee << ", " << yee << ")." << endl;
					real ree = 5.0 * randreal1() + 5.0;	//radius extreme event 5 to 10
					real intensity = 0.3 + 0.7 * randreal1(); // random intensity .3 to 1
					

					// enregistrement des infos sur le feu dans le fichier

					ofstream ffires ("data-raw-competition-feux/fires.dat", append);
					ffires << m << "\t" << xee << "\t" << yee << "\t" << ree << "\t" << intensity << endl;


					func real u1ee(real x, real y){
						real res;
						if ((x-xee)*(x-xee)+(y-yee)*(y-yee)<ree){
							res = u1(x, y)*(1-intensity);
						}
						else{
							res = u1(x,y);
						}
						return res;
					}
					func real w1ee(real x, real y){
						real res;
						if ((x-xee)*(x-xee)+(y-yee)*(y-yee)<ree){
							res = w1old(x, y)*(1-intensity);
						}
						else{
							res = w1old(x,y);
						}
						return res;
					}			
					u1 = u1ee(x, y);
					w1old = w1ee(x, y);
						
					func real u2ee(real x, real y){
						real res;
						if ((x-xee)*(x-xee)+(y-yee)*(y-yee)<ree){
							res = u2(x, y)*(1-intensity);
						}
						else{
							res = u2(x,y);
						}
						return res;
					}
					func real w2ee(real x, real y){
						real res;
						if ((x-xee)*(x-xee)+(y-yee)*(y-yee)<ree){
							res = w2old(x, y)*(1-intensity);
						}
						else{
							res = w2old(x,y);
						}
						return res;
					}			
					u2 = u2ee(x, y);
					w2old = w2ee(x, y);
				}
				else {
					cout << "=======================" << endl;
					cout << "= PAS DE FEU DE FORET =" << endl;	
					cout << "=======================" << endl;	
				}

			}
}



